from aiogram import types
import time
from bson import ObjectId
from amplitude import BaseEvent

from singleton import Bot
from singleton import Amplitude
from db.users import Users
from db.user_messages import User_Messages
from db.messages import Messages
from utils.message import send_message
from utils.keyboards import delete_keyboard
from utils.amplitude import message_to_string


async def start_handler(message: types.Message):
    bot = Bot().get_bot()
    users = Users()

    user = users.get_user_by_telegram_id(str(message.chat.id))
    if (user['is_banned_from_volunteering']):
        await bot.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Ü–µ–Ω–∫—É –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ üëã")
        return

    if (not user['is_volunteer']):
        await bot.send_message(message.chat.id, "–ê —Ç—ã –Ω–µ –≤–æ–ª–æ–Ω—Ç—ë—Ä!\n–ñ–¥–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –±–æ—Ç–µ: @rogermentalbot", disable_web_page_preview=True)
        return

    await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, –≤–æ–ª–æ–Ω—Ç—ë—Ä!")
    time.sleep(1)
    await bot.send_message(message.chat.id, "–í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ª–æ–≤–∞–º–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—é, –ø—Ä–µ–∂–¥–µ —á–µ–º –ø–æ–ø–∞—Å—Ç—å –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
    time.sleep(3)
    await bot.send_message(message.chat.id, "–ú–æ–¥–µ—Ä–∞—Ü–∏–µ–π –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ –≤–æ–ª–æ–Ω—Ç—ë—Ä–æ–≤, –∫ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∏ —Ç—ã üòå")
    time.sleep(3)
    await bot.send_message(message.chat.id, "–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ü–µ–Ω–∫–∏, –∫–æ–≥–¥–∞ –º–Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —Ç–≤–æ—è –ø–æ–º–æ—â—å. –ü–æ—Å—Ç–∞–≤—å –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º –ª–∞–π–∫ –∏–ª–∏ –¥–∏–∑–ª–∞–π–∫")
    time.sleep(3)
    await bot.send_message(message.chat.id, "–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–±–µ—Ä–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ –ª–∞–π–∫–æ–≤, –†–æ–¥–∂–µ—Ä –Ω–∞—á–Ω–µ—Ç –µ–≥–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–µ–º, –∫–æ–º—É –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
    time.sleep(2)
    await bot.send_message(message.chat.id, "–õ–æ–≤–∏ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –æ—Ü–µ–Ω–∫—É!")
    time.sleep(4)
    await get_message_and_send(ObjectId(user['_id']), message.chat.id)


async def get_message_and_send(user_id, chat_id):
    bot = Bot().get_bot()
    user_messages = User_Messages()
    messages = Messages()
    amplitude = Amplitude().get_amplitude()

    message_to_rate = messages.get_unapproved_by_user(user_id)

    message_list = list(message_to_rate)

    if (len(message_list) != 0):
        old_messages = user_messages.get_not_rated_massages(user_id)

        for old_message in old_messages:
            await delete_keyboard(chat_id, old_message['id_tg_message'])

        message_to_send = message_list[0]

        print('–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ: ' + str(message_to_send))

        await bot.send_message(chat_id, "–û—Ü–µ–Ω–∏ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")

        tg_message_id = await send_message(chat_id, message_to_send)

        amplitude.track(
            BaseEvent(
                event_type="Sending message to rate",
                user_id=str(user_id),
                event_properties={
                    "user": {"_id": user_id},
                    "message": message_to_string(message_to_send)
                }
            )
        )

        user_messages.insert_user_message(user_id, ObjectId(
            str(message_to_send['_id'])), tg_message_id)
    else:
        await bot.send_message(chat_id, "–°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –æ—Ü–µ–Ω–∫—É –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–π—Å—è –∑–∞–≤—Ç—Ä–∞ üëã")
