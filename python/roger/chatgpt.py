from aiogram import types
from variables import botClient
from database import get_database
from states import Recording
from aiogram.dispatcher import FSMContext
import openai
from openai.error import RateLimitError
from keyboards import ask_for_rate_messages_support
from database import get_database
import datetime
from common import delete_keyboard
from variables import CHATGPT_TOKEN

from classes.chatgpt_arrays import ArrayOfChats

array_of_chats = ArrayOfChats()


async def support_message(message: types.Message):
    await botClient.send_message(message.chat.id, "–¢—ã –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –Ω–µ–≥–æ, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /stop. –û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫ –∏–ª–∏ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –±–æ—Ç–∞ –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /feedback\n\n–î–∏—Å–∫–ª–µ–π–º–µ—Ä: –æ—Ç–≤–µ—Ç—ã –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã. –ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Å—å –∫ —Å–ª–µ–¥—É—é—â–∏–º –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º:\n\n1. –°–ª—É–∂–±–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏: 8 (800) 333-44-34\n2. –†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ —Å–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏: [—Å—Å—ã–ª–∫–∞](https://secretmag.ru/survival/telefony-besplatnoi-psikhologicheskoi-pomoshi-v-rossii.htm)", parse_mode="Markdown", disable_web_page_preview=True)
    await botClient.send_message(message.chat.id, "–ß—Ç–æ —Å—Ç—Ä—è—Å–ª–æ—Å—å, –¥—Ä—É–≥?")
    array_of_chats.add_message(message.chat.id, {
                               'role': 'assistant', 'content': '–û—Ç–≤–µ—á–∞–π –æ—Ç –∏–º–µ–Ω–∏ –†–æ–¥–∂–µ—Ä–∞. –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–¥–µ–π —Å –ø–ª–æ—Ö–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º'})

    await Recording.AwaitForAProblem.set()


async def support_callback(callback_query: types.CallbackQuery):
    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)
    await botClient.send_message(callback_query.from_user.id, "–¢—ã –ø–µ—Ä–µ—à–µ–ª –≤ —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–∏–∞–ª–æ–≥–∞. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –Ω–µ–≥–æ, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /stop. –û—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫ –∏–ª–∏ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –º–æ–∂–Ω–æ –ø–æ –∫–æ–º–∞–Ω–¥–µ /feedback")
    await botClient.send_message(callback_query.from_user.id, "–ß—Ç–æ —Å—Ç—Ä—è—Å–ª–æ—Å—å, –¥—Ä—É–≥?")
    array_of_chats.add_message(callback_query.from_user.id, {
                               'role': 'assistant', 'content': '–û—Ç–≤–µ—á–∞–π –æ—Ç –∏–º–µ–Ω–∏ –†–æ–¥–∂–µ—Ä–∞. –≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª—é–¥–µ–π —Å –ø–ª–æ—Ö–∏–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ–º'})
    await Recording.AwaitForAProblem.set()


async def await_for_a_problem(message: types.Message, state: FSMContext):
    await state.update_data(AwaitForAProblem=message.text)
    if message.text == "/stop":
        await state.finish()
        array_of_chats.delete_array(message.chat.id)
        await botClient.send_message(message.chat.id, "–¢—ã –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –¥–∏–∞–ª–æ–≥–∞. –ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–µ–≥–æ —Å–Ω–æ–≤–∞, –≤—ã–∑–æ–≤–∏ –∫–æ–º–∞–Ω–¥—É /support")
        return

    if str(message.text)[0] == '/':
        await botClient.send_message(message.chat.id, "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —Ä–µ–∂–∏–º–µ –¥–∏–∞–ª–æ–≥–∞. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –Ω–µ–≥–æ, –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É /stop, –∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑–æ–≤–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
        await Recording.AwaitForAProblem.set()
        return

    try:
        openai.api_key = CHATGPT_TOKEN
        collection_name = get_database()
        id_user_db = collection_name['users'].find_one({"telegram_id": str(message.chat.id)}, {
            "_id": 1})
        collection_name['support_messages_income'].insert_one(
            {"user_id": id_user_db["_id"], "tg_id_user": message.chat.id, "time_to_send": datetime.datetime.now(), "id_tg_message": message.message_id, "text": message.text})

        role = "user"
        mes = message.text.replace('\n', ' ')
        answer = {'role': role, 'content': mes}
        array_of_chats.add_message(message.chat.id, answer)
        completions = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=array_of_chats.get_chat(message.chat.id)

        )
        message_text = str(completions.choices[0].message.content).encode(
            'unicode_escape').decode('unicode_escape', 'ignore')
        id_message = await botClient.send_message(message.chat.id, message_text, reply_markup=ask_for_rate_messages_support)
        role = "assistant"
        answer = {'role': role, 'content': message_text}
        array_of_chats.add_message(message.chat.id, answer)
        collection_name['support_messages_outcome'].insert_one({"user_id": id_user_db["_id"], "tg_id_user": message.chat.id, "time_to_send": datetime.datetime.now(
        ), "id_tg_message": id_message.message_id, "text": id_message.text, "rate": None})

        await Recording.AwaitForAProblem.set()
        collection_name['support_messages_income'].find().close()
        collection_name['support_messages_outcome'].find().close()
    except RateLimitError:
        await botClient.send_message(message.chat.id, "–ë–æ—Ç —Å–µ–π—á–∞—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω –∑–∞–ø—Ä–æ—Å–∞–º–∏ üòø –ü–æ–¥–æ–∂–¥–∏ 10 —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–≤—Ç–æ—Ä–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å")
    except Exception as e:
        await botClient.send_message(message.chat.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –µ–≥–æ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ. –û—à–∏–±–∫–∞: " + str(e))


async def callback_after_click_on_button_support(callback_query: types.CallbackQuery, state: FSMContext, rate: bool):
    await botClient.answer_callback_query(callback_query.id, text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É, bestie ‚ù§Ô∏è')
    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)
    try:
        collection_name = get_database()
        collection_name["support_messages_outcome"].find_one_and_update(
            {'tg_id_user': callback_query.from_user.id, "id_tg_message": callback_query.message.message_id}, {"$set": {'rate': rate}})
        collection_name['support_messages_outcome'].find().close()
    except Exception as e:
        await botClient.send_message(callback_query.from_user.id, "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π –µ–≥–æ –∏–ª–∏ –ø–æ–ø—Ä–æ–±—É–π –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –µ–≥–æ –ø–æ–∑–∂–µ. –û—à–∏–±–∫–∞: " + str(e))
