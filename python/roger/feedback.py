"""Module providing functions for feedback interactions."""

from aiogram.dispatcher import FSMContext
from aiogram.types import ParseMode, Message, CallbackQuery

from keyboards import feedback_keyboard, feedback_finish_keyboard
from states import Recording
from common import delete_keyboard
from variables import botClient, botDispatcher
from db.users import (
    get_all_admins,
    get_user_by_telegram_id
)


async def feedback_start(message: Message):
    """
    Message handler for /feedback command

    Parameters:
    message (TG Message): message to handle

    Returns:
    None
    """

    await botClient.send_message(
        message.chat.id,
        (
            "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ñ–∏–¥–±–µ–∫–∞?\n"
            "–ï—Å–ª–∏ —Ç—ã –ø–µ—Ä–µ–¥—É–º–∞–ª –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ñ–∏–¥–±–µ–∫, –ø—Ä–æ—Å—Ç–æ –Ω–µ –Ω–∞–∂–∏–º–∞–π –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"
        ),
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=feedback_keyboard
    )


@botDispatcher.callback_query_handler(lambda c: c.data == 'feedback_start')
async def feedback_start_callback(callback_query: CallbackQuery):
    """
    Callback handler for /feedback -> "feedback_start"

    Parameters:
    callback_query (TG Callback): callback to handle

    Returns:
    None
    """

    await callback_query.answer("–ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")

    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)
    await botClient.send_message(
        callback_query.from_user.id,
        (
            "–¢—ã –ø–µ—Ä–µ—à–µ–ª –≤ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–¥–±–µ–∫–∞. "
            "–ù–∏–∂–µ –æ—Ç–ø—Ä–∞–≤—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ) ‚Äî "
            "–∏ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º"
        ),
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=feedback_finish_keyboard
    )

    await Recording.AwaitForAFeedback.set()


@botDispatcher.callback_query_handler(
    lambda c: c.data == 'feedback_finish',
    state=Recording.AwaitForAFeedback
)
async def feedback_finish_def(callback_query: CallbackQuery, state: FSMContext):
    """
    Callback handler for /feedback -> "feedback_finish"

    Parameters:
    callback_query (TG Callback): callback to handle
    state (TG State): current state

    Returns:
    None
    """

    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)
    await botClient.send_message(
        callback_query.from_user.id,
        (
            "–¢—ã –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–¥–±–µ–∫–∞. "
            "–ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ñ–∏–¥–±–µ–∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º, "
            "–≤—ã–∑–æ–≤–∏ –∫–æ–º–∞–Ω–¥—É /feedback"
        )
    )
    await state.finish()


@botDispatcher.callback_query_handler(lambda c: c.data == 'feedback_finish')
async def feedback_finish_def_without_message(callback_query: CallbackQuery):
    """
    Callback handler for /feedback -> "feedback_finish"

    Parameters:
    callback_query (TG Callback): callback to handle

    Returns:
    None
    """

    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)


async def feedback_get_text_from_user(message: Message, state: FSMContext):
    """
    Message handler for /feedback

    Parameters:
    message (TG Message): message to handle
    state (TG State): current state

    Returns:
    None
    """

    await state.update_data(name=message.text)

    user = get_user_by_telegram_id(str(message.chat.id))
    admins = get_all_admins()

    for admin in admins:
        await botClient.send_message(
            admin["telegram_id"],
            "–ù–æ–≤—ã–π —Ñ–∏–¥–±–µ–∫ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + user['telegram_username'] +
            ' –∏–∑ RogerMentalBot.\n\nchat_id: ' + str(message.chat.id) +
            '.\nmessage_id: ' + str(message.message_id) +
            '.\n\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n"' + message.text + '"'
        )

    await botClient.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É–ª–µ—Ç–µ–ª–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º. –°–ø–∞—Å–∏–±–æ! üòç")
    await state.finish()


async def feedback_get_photo_from_user(message: Message, state: FSMContext):
    """
    Message handler for /feedback

    Parameters:
    message (TG Message): message to handle
    state (TG State): current state

    Returns:
    None
    """

    await state.update_data(name=message.caption)

    user = get_user_by_telegram_id(str(message.chat.id))
    admins = get_all_admins()

    for admin in admins:
        await botClient.send_message(
            admin['telegram_id'],
            "–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " +
            user['telegram_username'] + '. –í–æ—Ç –æ–Ω–æ:'
        )

        message_caption = message.caption
        if message_caption is None:
            message_caption = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏"

        await botClient.send_photo(
            admin['telegram_id'],
            photo=message.photo[-1].file_id,
            caption=(
                'chat_id: ' + str(message.chat.id) +
                '.\nmessage_id: ' + str(message.message_id) +
                '.\n\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: "' + message_caption + '"'
            )
        )

    await botClient.send_message(message.chat.id, "–°–æ–æ–±—â–µ–Ω–∏–µ —É–ª–µ—Ç–µ–ª–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º. –°–ø–∞—Å–∏–±–æ! üòç")
    await state.finish()
