"""Module providing functions for friends interactions."""

from aiogram.types import (
    ParseMode,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    CallbackQuery
)
from aiogram.dispatcher import FSMContext
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.markdown import link

from variables import botClient
from db.friends import (
    get_all_friends,
    get_incoming_requests,
    insert_new_friends,
    get_friends_record,
    update_friend_status
)
from db.users import (
    get_user_by_id,
    get_user_by_telegram_id
)
from common import delete_keyboard
from states import FriendsStates
from keyboards import create_friends_keyboard, create_back_kb, friend_request_kb


call_back_approve = CallbackData("Approve", "id", "friend")
call_back_decline = CallbackData("Decline", "id", "friend")
call_back_delete = CallbackData("Delete", "id", "friend_to_delete")


def check_if_user_has_username(username: str):
    """ Validate username """
    return username not in ('@', ' ', '')


def change_empty_username_to_a_link(user_id: int, name: str):
    """ Change empty username to a link """
    return link(name, f"tg://user?id={user_id}")


async def get_menu_for_command(chat_id: int):
    """
    Message handler for /friends command

    Parameters:
    chat_id (int): user Telegram ID

    Returns:
    None
    """

    user = get_user_by_telegram_id(str(chat_id))

    friends_requests_count = len(get_incoming_requests(user['_id']))

    friends_count = len(get_all_friends(user['_id']))

    await botClient.send_message(
        chat_id,
        "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å",
        reply_markup=create_friends_keyboard(
            friends_requests_count, friends_count)
    )


async def await_for_a_friend_nickname(callback_query: CallbackQuery):
    """
    NOT USED ANYWHERE!!!
    Callback handler for /friends command

    Parameters:
    callback_query (TG Callback): callback to handle

    Returns:
    None
    """

    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)

    await botClient.send_message(
        callback_query.from_user.id,
        "–í–≤–µ–¥–∏ –Ω–∏–∫ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ –≤ Telegram, –∞ —è –ø—Ä–æ–≤–µ—Ä—é, –∑–Ω–∞–∫–æ–º –ª–∏ —è —Å –Ω–∏–º üôÉ"
    )
    await FriendsStates.AwaitForAFriendNicknameToAdd.set()


async def get_friend_nickname(message: Message, state: FSMContext):
    """
    Message handler for /friends command -> Await for a username state

    Parameters:
    message (TG Message): message to handle
    state (TG State): current state

    Returns:
    None
    """

    if message.text == "/stop":
        await state.finish()
        await botClient.send_message(message.chat.id, "–¢—ã –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞")
        return

    if str(message.text)[0] == '/':
        await botClient.send_message(
            message.chat.id,
            (
                "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –¥—Ä—É–≥–∞. "
                "–ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –Ω–µ–≥–æ, –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É /stop, "
                "–∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑–æ–≤–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É"
            )
        )
        await FriendsStates.AwaitForAFriendNicknameToAdd.set()
        return

    if str(message.text)[0] != '@':
        message.text = "@" + message.text

    if message.text == '@':
        await botClient.send_message(
            message.chat.id,
            "–≠—Ç–æ –Ω–∏–∫ –ü–∞–≤–ª–∞ –î—É—Ä–æ–≤–∞? –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å –∏ –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫ –µ—â–µ —Ä–∞–∑ üôÉ"
        )
        await FriendsStates.AwaitForAFriendNicknameToAdd.set()


async def send_request_to_a_friend(message: Message):
    """
    Message handler for /friends command -> share contact

    Parameters:
    message (TG Message): message to handle

    Returns:
    None
    """

    friend = get_user_by_telegram_id(str(message.user_shared.user_id))

    if friend is None:
        await botClient.send_message(
            message.chat.id,
            (
                "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –±—É–¥—É —Ä–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! "
                "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É —Å—Å—ã–ª–∫—É –Ω–∞ @RogerMentalBot –∏ "
                "–ø–æ–≤—Ç–æ—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏, –∫–æ–≥–¥–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è üôÉ"
            )
        )
        return

    user_from = get_user_by_telegram_id(str(message.chat.id))

    user_request_sent = get_friends_record(user_from['_id'], friend['_id'])

    if user_request_sent is not None:
        if user_request_sent['status'] == 0:
            await botClient.send_message(
                message.chat.id,
                (
                    "–¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∑–∞—è–≤–∫—É —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
                    "–ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –ø—Ä–∏–º–µ—Ç –∑–∞—è–≤–∫—É üïñ"
                )
            )
            return
        if user_request_sent['status'] == 1:
            await botClient.send_message(message.chat.id, "–í—ã —É–∂–µ –¥—Ä—É–∂–∏—Ç–µ üòÑ")
            return

    user_to = get_user_by_telegram_id(str(message.chat.id))

    user_got_request = get_friends_record(friend['_id'], user_to['_id'])

    if user_got_request is not None:
        if user_got_request['status'] == 0:
            await botClient.send_message(
                message.chat.id,
                (
                    "–¢–µ–±–µ —ç—Ç–æ—Ç –¥—Ä—É–≥ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∑–∞—è–≤–∫—É. "
                    "–ü–æ—Å–º–æ—Ç—Ä–∏, –∫—Ç–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è: /friends_requests"
                )
            )
            return
        if user_got_request['status'] == 1:
            await botClient.send_message(message.chat.id, "–í—ã —É–∂–µ –¥—Ä—É–∂–∏—Ç–µ üòÑ")
            return

    user = get_user_by_telegram_id(str(message.chat.id))
    insert_new_friends(
        user['_id'],
        friend['_id'],
        0
    )

    if not check_if_user_has_username(user['telegram_username']):
        user['telegram_username'] = change_empty_username_to_a_link(
            int(user['telegram_id']), user['name'])

    friend_request_kb_approve = InlineKeyboardButton(
        '‚úÖ', callback_data=call_back_approve.new(id='friend_approve', friend=user['telegram_id']))
    friend_request_kb_decline = InlineKeyboardButton(
        '‚ùå', callback_data=call_back_decline.new(id='friend_decline', friend=user['telegram_id']))

    friend_request_kb.add(friend_request_kb_approve, friend_request_kb_decline)

    await botClient.send_message(
        int(friend['telegram_id']),
        (
            "–¢–µ–±–µ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + user['name'] +
            " (" + user['telegram_username'] + ")"
        ),
        reply_markup=friend_request_kb
    )

    if not check_if_user_has_username(friend['telegram_username']):
        friend["telegram_username"] = change_empty_username_to_a_link(
            int(friend['telegram_id']), friend['name'])

    await botClient.send_message(
        message.chat.id,
        (
            "–û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + friend["telegram_username"] +
            ". –ö–æ–≥–¥–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –ø—Ä–∏–º–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è, "
            "—Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏"
        )
    )


async def show_active_friends(callback_query: CallbackQuery):
    """
    Callback handler for /friends command -> "check_friend_list"

    Parameters:
    callback_query (TG Callback): callback to handle

    Returns:
    None
    """

    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)

    user = get_user_by_telegram_id(str(callback_query.from_user.id))

    friends_id_list = get_all_friends(user['_id'])

    if len(friends_id_list) == 0:
        await botClient.send_message(
            callback_query.from_user.id,
            (
                "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞, "
                "–≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /friends –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞"
            )
        )
        return

    friend_list = []

    for friend_id in friends_id_list:
        friend = get_user_by_id(friend_id)

        if not check_if_user_has_username(friend['telegram_username']):
            friend["telegram_username"] = change_empty_username_to_a_link(
                int(friend['telegram_id']), friend['name'])

        friend_list.append(friend)

    usernames = ['üò∏' + ' ' + friend['telegram_username']
                 for friend in friend_list]
    mes = '–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏:\n\n' + \
        '\n'.join(usernames)

    await botClient.send_message(
        callback_query.from_user.id,
        mes,
        parse_mode="Markdown",
        disable_web_page_preview=True,
        reply_markup=create_back_kb("friends_menu")
    )


async def show_info(callback_query: CallbackQuery):
    """
    Callback handler for /friends command -> "info_friend_list"

    Parameters:
    callback_query (TG Callback): callback to handle

    Returns:
    None
    """

    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)

    mes = """–†–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä–µ–∂–∏–º–µ ¬´–î—Ä—É–∑—å—è¬ª

–î—Ä—É–∑—å—è ‚Äî —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏. –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å —Ç–æ–ª—å–∫–æ —Ç—ã.

–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç—ã –æ—Ç–º–µ—á–∞–µ—à—å üî¥ –∏–ª–∏ üü† –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è –ø–æ–ª—É—á–∞—é—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º ‚Äî  –æ–Ω–∏ —Å–º–æ–≥—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è
    """

    await botClient.send_message(callback_query.from_user.id, mes, parse_mode=ParseMode.MARKDOWN)


async def watch_friends_internal_requests(
    user_tg_id: int,
    message_id: int,
    keyboard_delete_need: bool
):
    """
    Callback handler for /friends command -> "friends_requests"

    Parameters:
    callback_query (TG Callback): callback to handle

    Returns:
    None
    """

    if keyboard_delete_need:
        await delete_keyboard(user_tg_id, message_id)

    user = get_user_by_telegram_id(str(user_tg_id))

    incoming_requests = get_incoming_requests(user['_id'])

    if len(incoming_requests) == 0:
        await botClient.send_message(user_tg_id, "–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–æ–∫ –≤ –¥—Ä—É–∑—å—è")
        return

    for request_user_id in incoming_requests:
        friend_request_kb = InlineKeyboardMarkup()

        friend_user = get_user_by_id(request_user_id)
        friend_telegram_id = friend_user["telegram_id"]

        friend_request_kb_approve = InlineKeyboardButton(
            '‚úÖ',
            callback_data=call_back_approve.new(
                id='friend_approve', friend=friend_telegram_id)
        )
        friend_request_kb_decline = InlineKeyboardButton(
            '‚ùå',
            callback_data=call_back_decline.new(
                id='friend_decline', friend=friend_telegram_id)
        )

        friend_request_kb.add(friend_request_kb_approve,
                              friend_request_kb_decline)

        if not check_if_user_has_username(friend_user['telegram_username']):
            friend_user["telegram_username"] = change_empty_username_to_a_link(
                int(friend_user['telegram_id']), friend_user['name'])

        await botClient.send_message(
            user_tg_id,
            f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {friend_user['telegram_username']}",
            reply_markup=friend_request_kb
        )


async def friends_internal_request(callback_query: CallbackQuery, friend: str, approve: bool):
    """
    Callback handler for /friends command -> "friend_approve" or "friend_approve"

    Parameters:
    callback_query (TG Callback): callback to handle

    Returns:
    None
    """

    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)

    if approve:
        status = 1
    else:
        status = 2

    user_to = get_user_by_telegram_id(str(callback_query.from_user.id))
    user_from = get_user_by_telegram_id(friend)

    friends_record = get_friends_record(user_from["_id"], user_to['_id'])
    friend_obj = update_friend_status(friends_record['_id'], status)

    if not check_if_user_has_username(friend_obj['telegram_username']):
        friend_obj["telegram_username"] = change_empty_username_to_a_link(
            int(friend_obj['telegram_id']), friend_obj['name'])

    if approve:
        await botClient.send_message(
            callback_query.from_user.id,
            (
                "–¢–µ–ø–µ—Ä—å —Ç—ã –¥—Ä—É–∂–∏—à—å —Å " + friend_obj['telegram_username'] + " üî•. " +
                "–ö–æ–≥–¥–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –æ—Ç–º–µ—Ç–∏—Ç üî¥ –∏–ª–∏ üü† –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —è —Å–∫–∞–∂—É —Ç–µ–±–µ –æ–± —ç—Ç–æ–º"
            )
        )

        friend_obj = get_user_by_telegram_id(friend)
        user_obj = get_user_by_telegram_id(str(callback_query.from_user.id))

        if not check_if_user_has_username(user_obj['telegram_username']):
            user_obj["telegram_username"] = change_empty_username_to_a_link(
                int(user_obj['telegram_id']), user_obj['name'])

        await botClient.send_message(
            friend_obj["telegram_id"],
            (
                "–¢–µ–ø–µ—Ä—å —Ç—ã –¥—Ä—É–∂–∏—à—å —Å " + user_obj['telegram_username'] + ". " +
                "–ö–æ–≥–¥–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –æ—Ç–º–µ—Ç–∏—Ç üî¥ –∏–ª–∏ üü† –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —è —Å–∫–∞–∂—É —Ç–µ–±–µ –æ–± —ç—Ç–æ–º"
            )
        )
        return

    await botClient.send_message(
        callback_query.from_user.id,
        f"–¢—ã –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è –æ—Ç {friend_obj['telegram_username']} üôå"
    )


async def send_a_friend_message_about_bad_mood(tg_id_user: int, color: str):
    """
    Function to send message to user friends

    Parameters:
    tg_id_user (int): Telegrame ID of user to send message to his friends
    color (str): can be "red" or "orange"

    Returns:
    None
    """

    mood_dict = {'green': "üü¢", 'yellow': "üü°", 'orange': "üü†", 'red': "üî¥"}

    user = get_user_by_telegram_id(tg_id_user)
    friends = get_all_friends(user['_id'])

    if len(friends) == 0:
        return

    for friend_user_id in friends:
        friend = get_user_by_id(friend_user_id)

        if not check_if_user_has_username(user['telegram_username']):
            user["telegram_username"] = change_empty_username_to_a_link(
                int(user['telegram_id']), user['name'])

        await botClient.send_message(
            friend["telegram_id"],
            (
                "–¢–≤–æ–π –¥—Ä—É–≥ " + user['telegram_username'] + " –æ—Ç–º–µ—Ç–∏–ª, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —É –Ω–µ–≥–æ " +
                mood_dict[color] +
                " –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –Ω–∞–ø—Ä—è–º—É—é"
            ),
            parse_mode="Markdown",
            disable_web_page_preview=True
        )


async def delete_friends(callback_query: CallbackQuery):
    """
    Callback handler for /friends command -> "friend_delete"

    Parameters:
    callback_query (TG Callback): callback to handle

    Returns:
    None
    """

    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)
    await botClient.send_message(
        callback_query.from_user.id,
        'ToDo: –¥–æ–¥–µ–ª–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–∑–µ–π'
    )

    # friends_list = await find_all_friends(
    #     await get_user_by_telegram_id(callback_query.from_user.id),
    # )
    # await delete_friends_message(callback_query.from_user.id, friends_list,
    # 0, 0)


# –¢—É—Ç –ø–∏–∑–¥–µ—Ü –ø–æ–ª–Ω—ã–π, –¥–≤–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —á—Ç–æ –≤–æ–æ–±—â–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ñ—É–Ω–∫—Ü–∏–∏
# –í –∫–æ–Ω—Ü–µ –∑–∞–±—ã–ª send_mesasge –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?? –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î –æ —É–¥–∞–ª–µ–Ω–∏–∏??

# async def delete_friends_message(
#     id_user: int,
#     friends_list: list,
#     index_to_show: int,
#     id_message: int
# ):
#     if len(friends_list) == 0:
#         await botClient.send_message(
#             id_user,
#             "–£ —Ç–µ–±—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥—Ä—É–∑–µ–π ü•≤",
#             reply_markup=create_back_kb("friends_menu")
#         )
#         return
#     friends_delete_message_kb = InlineKeyboardMarkup(one_time_keyboard=True)
#     mes = "üòª –¢–≤–æ–π –¥—Ä—É–≥: /n/n"
#     friend = await search_user_by_object_id(friends_list[index_to_show])
#     if check_if_user_has_username(friend['telegram_username']):
#         mes += friend['telegram_username']
#     else:
#         change_empty_username_to_a_link(friend['telegram_id'], friend['name'])
#     friends_button_delete = InlineKeyboardButton(
#         'üòø –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞',
#         callback_data=call_back_decline.new(
#             id='friend_delete',
#             friend_to_delete=friend['_id']
#         )
#     )


# –µ–±–∞–Ω—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤–µ–∑–¥–µ
