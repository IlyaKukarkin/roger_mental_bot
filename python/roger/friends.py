"""Module providing functions for friends interactions."""

from aiogram import dispatcher
from aiogram.types import (
    ParseMode,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    CallbackQuery
)
from aiogram.utils.callback_data import CallbackData
from aiogram.utils.markdown import link
from aiogram.utils.exceptions import MessageError


from amplitude_utils import amplitude_send_default_source_event
from variables import botClient, botDispatcher
from db.friends import (
    get_all_friends,
    get_incoming_requests,
    insert_new_friends,
    get_friends_record,
    delete_friends_request,
    add_new_friend,
    delete_from_friends,
    count_all_user_friends_request,
    add_array_friends
)
from db.users import (
    get_user_by_id,
    get_user_by_telegram_id
)
from db.app_settings import App_Settings
from common import delete_keyboard
from states import Recording
from keyboards import (
    create_friends_keyboard,
    create_back_kb,
    add_delete_from_friends_kb,
    create_support_friend_kb,
    create_exit_kb,
    create_kb_for_message_like
)


call_back_approve = CallbackData("Approve", "id", "friend")
call_back_decline = CallbackData("Decline", "id", "friend")
call_back_delete = CallbackData("Delete", "id", "friend_to_delete")


def check_if_user_has_username(user: dict):
    """Check if username exists and validate username"""
    if user['telegram_username'] in ('@', ' ', ''):
        return False
    return True


def change_empty_username_to_a_link(user_id: int, name: str):
    """ Change empty username to a link """
    return link(name, f"tg://user?id={user_id}")


async def get_menu_for_command(chat_id: int):
    """
    Message handler for /friends command

    Parameters:
    chat_id (int): user Telegram ID

    Returns:
    None
    """
    app_settings = App_Settings()
    settings = app_settings.get_app_settings()

    user = get_user_by_telegram_id(str(chat_id))

    friends_requests_count = len(get_incoming_requests(user['_id']))

    friends_count = len(get_all_friends(user['_id']))

    if friends_count < settings['friends_limit']:
        await botClient.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å",
            reply_markup=create_friends_keyboard(
                friends_requests_count, friends_count, friends_count < settings['friends_limit'])
        )

    else:
        await botClient.send_message(
            chat_id,
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å\\.\n\n"
            "–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ\\: —Ç—ã –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –ø–æ —á–∏—Å–ª—É –¥—Ä—É–∑–µ–π\\. "
            f"–¢–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç: {settings['friends_limit']} –¥—Ä—É–≥–∞\\.",
            reply_markup=create_friends_keyboard(
                friends_requests_count, friends_count, friends_count < settings['friends_limit']),
            parse_mode=ParseMode.MARKDOWN_V2
        )

# –ü–æ—á–∏–Ω–∏—Ç—å: –æ—á–µ–Ω—å –º–Ω–æ–≥–æ if-–æ–≤, –Ω—É–∂–Ω–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å
# pylint: disable=too-many-branches
async def send_request_to_a_friend(message: Message):
    
    """
    Message handler for /friends command -> share contact

    Parameters:
    message (TG Message): message to handle

    Returns:
    None
    """
    try:

        friend = get_user_by_telegram_id(str(message.user_shared.user_id))

        if not 'friends' in friend:
            add_array_friends(friend["_id"])
            friend = get_user_by_telegram_id(str(message.user_shared.user_id))

        reply_message = ''

        if friend is None:
            reply_message = (
                "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –±—É–¥—É —Ä–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è\\!\n\n"
                "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É —Å—Å—ã–ª–∫—É –Ω–∞ –º–µ–Ω—è "
                "https://t\\.me/rogermentalbot\\?start\\=friends –∏ "
                "–ø–æ–≤—Ç–æ—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏, –∫–æ–≥–¥–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è üôÉ"
            )

        app_settings = App_Settings()
        settings = app_settings.get_app_settings()

        user_from = get_user_by_telegram_id(str(message.chat.id))

        if not 'friends' in user_from:
            add_array_friends(user_from["_id"])
            user_from = get_user_by_telegram_id(str(message.chat.id))

        if not reply_message and count_all_user_friends_request(
                user_from) + len(user_from["friends"]) >= settings['friends_limit']:
            reply_message = (
                f"""–¢—ã –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –Ω–∞ —á–∏—Å–ª–æ –¥—Ä—É–∑–µ–π –∏ –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è ü•≤

–í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:
1. –ü—Ä–æ–≤–µ—Ä—å –≤—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è –ø–æ –∫–æ–º–∞–Ω–¥–µ /friends_requests
2. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ –¥—Ä—É–∑—å—è –ø—Ä–∏–º—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ç–æ–±–æ–π –∑–∞—è–≤–∫–∏
3. –£–¥–∞–ª–∏ –¥—Ä—É–∑–µ–π, –µ—Å–ª–∏ —Å—á–∏—Ç–∞–µ—à—å –Ω—É–∂–Ω—ã–º

–í—Å–µ–≥–æ —Ç—ã –º–æ–∂–µ—à—å –∏–º–µ—Ç—å –Ω–µ –±–æ–ª–µ–µ {settings['friends_limit']} –¥—Ä—É–∑–µ–π –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è"""
            )

        if not reply_message and len(
                friend["friends"]) >= settings['friends_limit']:
            reply_message = (
                f"""–¢–≤–æ–π –¥—Ä—É–≥ —É–∂–µ –¥–æ–±–∞–≤–∏–ª —Å–µ–±–µ {settings['friends_limit']} –¥—Ä—É–≥–∞ ü•≤

–¢—ã —Å–º–æ–∂–µ—à—å –ø–æ–¥—Ä—É–∂–∏—Ç—å—Å—è —Å –Ω–∏–º, –µ—Å–ª–∏ –æ–Ω —É–¥–∞–ª–∏—Ç –∫–æ–≥–æ-–Ω–∏–±—É–¥—å –∏–∑ —Å–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π"""
            )

        if not reply_message and len(friend["friends"]) + \
                count_all_user_friends_request(friend) >= settings['friends_limit']:
            reply_message = (
                "–¢–≤–æ–π –¥—Ä—É–≥ —É–∂–µ –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª —Å–≤–æ–π –ª–∏–º–∏—Ç –Ω–∞ —á–∏—Å–ª–æ –¥—Ä—É–∑–µ–π"
                " –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è ü•≤"
            )

        if not reply_message and not friend["is_active"]:
            reply_message = (
                "–Ø –∑–Ω–∞—é —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –æ–Ω –ø–µ—Ä–µ—Å—Ç–∞–ª –∑–∞–º–µ—Ä—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π ü•≤\n\n"
                "–ü–æ–ø—Ä–æ—Å–∏ –µ–≥–æ –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ https://t\\.me/rogermentalbot\\?start\\=friends "
                "–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –†–æ–¥–∂–µ—Ä–µ, —á—Ç–æ–±—ã —Ç—ã —Å–º–æ–≥ –ø–æ–¥—Ä—É–∂–∏—Ç—å—Å—è —Å –Ω–∏–º"
            )

        if not reply_message and user_from["_id"] == friend["_id"]:
            reply_message = (
                "–°–µ–±—è –ø–æ–∫–∞ –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–ª—è—Ç—å –≤ –¥—Ä—É–∑—å—è üòÅ"
            )

        if not reply_message and "friends" in user_from:
            for f in user_from["friends"]:
                if f == friend["_id"]:
                    reply_message = (
                        "–í—ã —É–∂–µ –¥—Ä—É–∂–∏—Ç–µ üò∏"
                    )

        user_request_sent = get_friends_record(user_from['_id'], friend['_id'])

        if not reply_message and user_request_sent is not None:
            reply_message = (
                "–¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∑–∞—è–≤–∫—É —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
                "–ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –ø—Ä–∏–º–µ—Ç –∑–∞—è–≤–∫—É üïñ"
            )

        user_got_request = get_friends_record(friend['_id'], user_from['_id'])

        if not reply_message and user_got_request is not None:
            reply_message = (
                "–≠—Ç–æ—Ç –¥—Ä—É–≥ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ –∑–∞—è–≤–∫—É. "
                "–ü–æ—Å–º–æ—Ç—Ä–∏, –∫—Ç–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è: /friends_requests"
            )

        if reply_message:
            await botClient.send_message(
                message.chat.id,
                reply_message,
                reply_markup=create_back_kb("friends_menu")
            )
            return

        if not check_if_user_has_username(user_from):
            user_from['telegram_username'] = change_empty_username_to_a_link(
                int(user_from['telegram_id']), user_from['name'])

        friend_request_kb = InlineKeyboardMarkup()
        friend_request_kb_approve = InlineKeyboardButton(
            '‚úÖ', callback_data=call_back_approve.new(id='friend_approve',
                                                        friend=user_from['telegram_id']))
        friend_request_kb_decline = InlineKeyboardButton(
            '‚ùå', callback_data=call_back_decline.new(id='friend_decline',
                                                        friend=user_from['telegram_id']))

        friend_request_kb.add(
            friend_request_kb_approve,
            friend_request_kb_decline)

        mes = "–¢–µ–±–µ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥—Ä—É–∂–±—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è " + \
            user_from['telegram_username'] + "\\.\n\n" + \
            "–ï—Å–ª–∏ —Ç—ã –ø—Ä–∏–º–µ—à—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å, —Ç–≤–æ–π –¥—Ä—É–≥ –Ω–∞—á–Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è," + \
            " –∫–æ–≥–¥–∞ —Ç—ã –æ—Ç–º–µ—Ç–∏—à—å üî¥ –∏–ª–∏ üü† –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"
        mes = mes.replace("@", "\\@")
        mes = mes.replace("_", "\\_")

        await botClient.send_message(
            int(friend['telegram_id']),
            mes,
            reply_markup=friend_request_kb, parse_mode=ParseMode.MARKDOWN_V2
        )

        insert_new_friends(
            user_from['_id'],
            friend['_id']
        )

        if not check_if_user_has_username(friend):
            friend["telegram_username"] = change_empty_username_to_a_link(
                int(friend['telegram_id']), friend['name'])

        mes = "–û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + friend["telegram_username"] + \
            "\\. –ö–æ–≥–¥–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –ø—Ä–∏–º–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è, " + \
            "—Ç—ã –Ω–∞—á–Ω–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ üî¥ –∏–ª–∏ üü† –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏"
        mes = mes.replace("@", "\\@")
        mes = mes.replace("_", "\\_")

        await botClient.send_message(
            message.chat.id,
            mes,
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
            reply_markup=create_back_kb("friends_menu")
        )

    # –ü–æ—á–∏–Ω–∏—Ç—å: –æ—Ç–ª–∞–≤–ª–∏–≤–∞—Ç—å –æ—à–∏–±–∫—É –ø–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –±–æ—Ç–∞, –ø—Ä–µ–∂–¥–µ —á–µ–º –ª–æ–≤–∏—Ç—å –æ–±—â—É—é –æ—à–∏–±–∫—É
    # pylint: disable=broad-exception-caught
    except Exception as e:
        # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ friend –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ –∑–∞–¥–∏–∑–µ–π–±–ª–∏–ª –±–æ—Ç–∞

        await amplitude_send_default_source_event("Error",
                                                  str(message.chat.id),
                                                  "Friends. Exception While Adding Friend",
                                                  str(e))
        await botClient.send_message(
            message.chat.id,
            (
                "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –±—É–¥—É —Ä–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è\\!\n\n"
                "–û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É —Å—Å—ã–ª–∫—É –Ω–∞ –†–æ–¥–∂–µ—Ä–∞ "
                "https://t\\.me/rogermentalbot\\?start\\=friends –∏ "
                "–ø–æ–≤—Ç–æ—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏, –∫–æ–≥–¥–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è üôÉ"
            ),
            parse_mode=ParseMode.MARKDOWN_V2,
            disable_web_page_preview=True,
            reply_markup=create_back_kb("friends_menu")
        )
        return


async def show_active_friends(callback_query: CallbackQuery):
    """




    Callback handler for /friends command -> "check_friend_list"

    Parameters:
    callback_query (TG Callback): callback to handle

    Returns:
    None
    """

    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)

    user = get_user_by_telegram_id(str(callback_query.from_user.id))

    friends_id_list = get_all_friends(user['_id'])

    if len(friends_id_list) == 0:
        await botClient.send_message(
            callback_query.from_user.id,
            (
                "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞, "
                "–≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /friends –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞"
            )
        )
        return

    friend_list = []

    for friend_id in friends_id_list:

        friend = get_user_by_id(friend_id)

        if not check_if_user_has_username(friend):
            friend["telegram_username"] = change_empty_username_to_a_link(
                int(friend['telegram_id']), friend['name'])

        friend_list.append(friend['telegram_username'])

    usernames = ['üò∏ ' + friend
                 for friend in friend_list]

    mes = '–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏:\n\n' + \
        '\n'.join(usernames)

    mes = mes.replace("@", "\\@")
    mes = mes.replace("_", "\\_")

    await botClient.send_message(
        callback_query.from_user.id,
        mes,
        disable_web_page_preview=True,
        reply_markup=create_back_kb("friends_menu"),
        parse_mode=ParseMode.MARKDOWN_V2
    )


async def show_info(callback_query: CallbackQuery):
    """
    Callback handler for /friends command -> "info_friend_list"

    Parameters:
    callback_query (TG Callback): callback to handle

    Returns:
    None
    """

    app_settings = App_Settings()
    settings = app_settings.get_app_settings()

    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)

    mes = f"""–†–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä–µ–∂–∏–º–µ ¬´–î—Ä—É–∑—å—è¬ª.

–î—Ä—É–∑—å—è ‚Äî —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏. –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å —Ç–æ–ª—å–∫–æ —Ç—ã.

–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç—ã –æ—Ç–º–µ—á–∞–µ—à—å üî¥ –∏–ª–∏ üü† –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è –ø–æ–ª—É—á–∞—é—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º ‚Äî –æ–Ω–∏ —Å–º–æ–≥—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è.

–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ: –≤—Å–µ–≥–æ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ –±–æ–ª–µ–µ {settings['friends_limit']} –¥—Ä—É–∑–µ–π. –î–æ–±–∞–≤–ª—è–π —Ç–æ–ª—å–∫–æ —Å–∞–º—ã—Ö –±–ª–∏–∑–∫–∏—Ö!
    """

    await botClient.send_message(callback_query.from_user.id,
                                 mes,
                                 parse_mode=ParseMode.MARKDOWN,
                                 reply_markup=create_back_kb("friends_menu"))


async def watch_friends_internal_requests(
    user_tg_id: int,
    message_id: int,
    keyboard_delete_need: bool
):
    """
    Callback handler for /friends command -> "friends_requests"

    Parameters:
    callback_query (TG Callback): callback to handle

    Returns:
    None
    """

    if keyboard_delete_need:
        await delete_keyboard(user_tg_id, message_id)

    user = get_user_by_telegram_id(str(user_tg_id))

    incoming_requests = get_incoming_requests(user['_id'])

    if len(incoming_requests) == 0:
        await botClient.send_message(user_tg_id, "–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è")
        return

    for request_user_id in incoming_requests:
        friend_request_kb = InlineKeyboardMarkup()

        friend_user = get_user_by_id(request_user_id)
        friend_telegram_id = friend_user["telegram_id"]

        friend_request_kb_approve = InlineKeyboardButton(
            '‚úÖ',
            callback_data=call_back_approve.new(
                id='friend_approve', friend=friend_telegram_id)
        )
        friend_request_kb_decline = InlineKeyboardButton(
            '‚ùå',
            callback_data=call_back_decline.new(
                id='friend_decline', friend=friend_telegram_id)
        )

        friend_request_kb.add(friend_request_kb_approve,
                              friend_request_kb_decline)

        if not check_if_user_has_username(friend_user):
            friend_user["telegram_username"] = change_empty_username_to_a_link(
                int(friend_user['telegram_id']), friend_user['name'])

        mes = f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {friend_user['telegram_username']}\\.\n\n" + \
            "–ï—Å–ª–∏ —Ç—ã –ø—Ä–∏–º–µ—à—å —ç—Ç–æ—Ç –∑–∞–ø—Ä–æ—Å, —Ç–≤–æ–π –¥—Ä—É–≥ –Ω–∞—á–Ω–µ—Ç " + \
            "–ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∫–æ–≥–¥–∞ —Ç—ã –æ—Ç–º–µ—Ç–∏—à—å üî¥ –∏–ª–∏ üü† –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"

        mes = mes.replace("@", "\\@")
        mes = mes.replace("_", "\\_")

        await botClient.send_message(
            user_tg_id,
            mes,
            reply_markup=friend_request_kb,
            parse_mode=ParseMode.MARKDOWN_V2
        )


async def friends_internal_request(callback_query: CallbackQuery, friend: str, approve: bool):
    """
    Callback handler for /friends command -> "friend_approve" or "friend_approve" or decline

    Parameters:
    callback_query (TG Callback): callback to handle

    Returns:
    None
    """

    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)

    user_to = get_user_by_telegram_id(str(callback_query.from_user.id))
    user_from = get_user_by_telegram_id(friend)

    if not check_if_user_has_username(user_from):
        user_from["telegram_username"] = change_empty_username_to_a_link(
            int(user_from['telegram_id']), user_from['name'])

    delete_friends_request(user_to["_id"], user_from["_id"])

    if approve:

        add_new_friend(user_to["_id"], user_from["_id"])

        mes = "–¢–µ–ø–µ—Ä—å —Ç—ã –¥—Ä—É–∂–∏—à—å —Å " + user_from['telegram_username'] + "\\. " + \
              "–ö–æ–≥–¥–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –æ—Ç–º–µ—Ç–∏—Ç üî¥ –∏–ª–∏ üü† –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —è —Å–∫–∞–∂—É —Ç–µ–±–µ –æ–± —ç—Ç–æ–º"

        mes = mes.replace("@", "\\@")
        mes = mes.replace("_", "\\_")

        await botClient.send_message(
            callback_query.from_user.id,
            mes,
            parse_mode=ParseMode.MARKDOWN_V2
        )

        if not check_if_user_has_username(user_to):
            user_to["telegram_username"] = change_empty_username_to_a_link(
                int(user_to['telegram_id']), user_to['name'])

        mes = "–¢–µ–ø–µ—Ä—å —Ç—ã –¥—Ä—É–∂–∏—à—å —Å " + user_to['telegram_username'] + "\\. " + \
              "–ö–æ–≥–¥–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –æ—Ç–º–µ—Ç–∏—Ç üî¥ –∏–ª–∏ üü† –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —è —Å–∫–∞–∂—É —Ç–µ–±–µ –æ–± —ç—Ç–æ–º"

        mes = mes.replace("@", "\\@")
        mes = mes.replace("_", "\\_")

        await botClient.send_message(
            user_from["telegram_id"],
            mes,
            parse_mode=ParseMode.MARKDOWN_V2
        )
        return

    mes = "–¢—ã –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è –æ—Ç " + \
        user_from['telegram_username'] + " üôå"

    mes = mes.replace("@", "\\@")
    mes = mes.replace("_", "\\_")

    await botClient.send_message(
        callback_query.from_user.id,
        mes,
        parse_mode=ParseMode.MARKDOWN_V2
    )


async def send_a_friend_message_about_bad_mood(tg_id_user: int, color: str):
    """
    Function to send message to user friends

    Parameters:
    tg_id_user (int): Telegrame ID of user to send message to his friends
    color (str): can be "red" or "orange"

    Returns:
    None
    """

    mood_dict = {'green': "üü¢", 'yellow': "üü°", 'orange': "üü†", 'red': "üî¥"}
    user = get_user_by_telegram_id(str(tg_id_user))
    friends = get_all_friends(user['_id'])

    if len(friends) == 0:
        return

    for friend_user_id in friends:
        friend = get_user_by_id(friend_user_id)

        if not check_if_user_has_username(user):
            user["telegram_username"] = change_empty_username_to_a_link(
                int(user['telegram_id']), user['name'])
        try:
            mes = "–¢–≤–æ–π –¥—Ä—É–≥ " + user['telegram_username'] + \
                  " –æ—Ç–º–µ—Ç–∏–ª, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —É –Ω–µ–≥–æ " + \
                mood_dict[color] + \
                  " –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ\\. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ"

            mes = mes.replace("@", "\\@")
            mes = mes.replace("_", "\\_")
            await botClient.send_message(
                int(friend["telegram_id"]),
                mes,
                parse_mode=ParseMode.MARKDOWN_V2,
                disable_web_page_preview=True,
                reply_markup=create_support_friend_kb(str(tg_id_user))
            )
        except MessageError:
            print(
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " +
                user['telegram_username'])
        # pylint: disable=broad-exception-caught
        except Exception as e:
            await amplitude_send_default_source_event("Error",
                                                      friend["telegram_id"],
                                                      "send_a_friend_message_about_bad_mood",
                                                      e)


async def delete_from_friends_message(callback_query: CallbackQuery, index: int):
    "main function to delete friends"

    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)

    user = get_user_by_telegram_id(str(callback_query.from_user.id))

    friends = get_all_friends(user['_id'])

    current_friend = get_user_by_id(friends[index])

    if not check_if_user_has_username(current_friend):
        current_friend['telegram_username'] = change_empty_username_to_a_link(
            int(current_friend['telegram_id']), current_friend['name'])

    left_index, right_index = calculating_indexes_for_delete_kb_friends(
        index, len(friends))

    mes = f"""*–î—Ä—É–≥ {index+1} –∏–∑ {len(friends)}*\n
–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_friend['telegram_username']} –∏–∑ –¥—Ä—É–∑–µ–π\\?\n
–ï—Å–ª–∏ —Ç—ã —É–¥–∞–ª–∏—à—å –¥—Ä—É–≥–∞, –æ–Ω –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏"""
    mes = mes.replace("@", "\\@")
    mes = mes.replace("_", "\\_")

    await botClient.send_message(
        callback_query.from_user.id,
        mes,
        parse_mode=ParseMode.MARKDOWN_V2,
        reply_markup=add_delete_from_friends_kb(
            len(friends), index, left_index, right_index, str(
                current_friend["telegram_id"]))
    )


def calculating_indexes_for_delete_kb_friends(index: int, len_array: int):
    "–∏–Ω–¥–µ–∫—Å—ã —á–∏—Å—Ç–æ –¥–ª—è —Ñ—Ä–æ–Ω—Ç–∞, –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–∏—Ö –∫ –º–∞—Å—Å–∏–≤—É —Å–¥–µ–ª–∞–π -1"
    index += 1

    left_index = index - 1
    right_index = index + 1

    if left_index < 1:
        left_index = len_array

    if right_index > len_array:
        right_index = 1

    return left_index, right_index


async def delete_from_friends_go(callback_query: CallbackQuery,
                                 index: int,
                                 number_of_friends: int,
                                 direction: str):
    """allows user to choose which friend should be deleted"""

    if direction == "left":
        index = index - 1

    if direction == "right":
        index = index + 1

    if index < 0:
        index = number_of_friends - 1

    if index == number_of_friends:
        index = 0

    await delete_from_friends_message(callback_query, index)


async def delete_friend(callback_query: CallbackQuery, friend_id: str):
    """finishes delete a friend"""

    user = get_user_by_telegram_id(str(callback_query.from_user.id))

    current_friend = get_user_by_telegram_id(friend_id)

    delete_from_friends(user["_id"], current_friend["_id"])

    if not check_if_user_has_username(current_friend):
        current_friend['telegram_username'] = change_empty_username_to_a_link(
            int(current_friend['telegram_id']), current_friend['name'])

    mes = f"–£–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {current_friend['telegram_username']} –∏–∑ —Ç–≤–æ–∏—Ö –¥—Ä—É–∑–µ–π üôå"
    mes = mes.replace("@", "\\@")
    mes = mes.replace("_", "\\_")

    if (len(user["friends"])) == 1:
        # 1, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        await botClient.send_message(
            callback_query.from_user.id,
            mes,
            parse_mode=ParseMode.MARKDOWN_V2,
            reply_markup=create_exit_kb()
        )
        return

    await botClient.send_message(
        callback_query.from_user.id,
        mes,
        parse_mode=ParseMode.MARKDOWN_V2
    )

    await delete_from_friends_message(callback_query, 0)


async def support_friend(callback_query: CallbackQuery, friend_id: str):
    """
    start to create a support mes for friend
    """
    message_with_button = await botClient.send_message(
        callback_query.from_user.id,
        ("""–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ, –∞ —è –ø–µ—Ä–µ–¥–∞–º –µ–≥–æ —Ç–≤–æ–µ–º—É –¥—Ä—É–≥—É.

–ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–π –º–µ–¥–∏–∞—Ñ–∞–π–ª—ã, —è –ø–æ–∫–∞ —É–º–µ—é –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""),
        reply_markup=create_back_kb("main")
    )
    await Recording.AwaitForASupportMessageFromFriend.set()
    state = botDispatcher.get_current().current_state()
    await state.update_data(friend_id=friend_id,
                            message_with_button_id=message_with_button.message_id)


async def sendmes_to_support_friend(friend_id: str, message: Message, state: dispatcher.FSMContext):
    """
    function sends a message to a user's friend
    """
    user = get_user_by_telegram_id(str(message.chat.id))

    if not check_if_user_has_username(user):
        user['telegram_username'] = change_empty_username_to_a_link(
            int(user['telegram_id']), user['name'])

    mes = f"""–¢–≤–æ–π –¥—Ä—É–≥ {user['telegram_username']} –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–µ–±—è\\.

–í–æ—Ç –µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\\: """
    mes = mes.replace("@", "\\@")
    mes = mes.replace("_", "\\_")

    await botClient.send_message(
        int(friend_id),
        mes,
        parse_mode=ParseMode.MARKDOWN_V2
    )

    await botClient.send_message(
        int(friend_id), message.text,
        reply_markup=create_kb_for_message_like(user["telegram_id"], message.message_id))

    await botClient.send_message(
        int(user["telegram_id"]), "–¢–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥—Ä—É–≥—É üíô")

    await state.finish()


async def like_on_support_friend(callback_query: CallbackQuery, friend_id: str, message_id: int):
    """press like on message with support from a friend"""

    user = get_user_by_telegram_id(str(callback_query.from_user.id))

    if not check_if_user_has_username(user):
        user['telegram_username'] = change_empty_username_to_a_link(
            int(user['telegram_id']), user['name'])

    await botClient.send_message(
        int(friend_id),
        f"–¢–≤–æ–π –¥—Ä—É–≥ {user['telegram_username']} –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ –Ω–∞ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π ‚ù§Ô∏è",
        reply_to_message_id=message_id,
        parse_mode=ParseMode.MARKDOWN_V2)
