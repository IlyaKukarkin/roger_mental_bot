from aiogram.types import ParseMode, InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.dispatcher import FSMContext
from aiogram.utils.callback_data import CallbackData

from variables import botClient
from database import get_database, search_user_by_nickname, send_friends_request, search_user_by_tg_id, search_user_by_object_id, check_if_user_sent_request, check_if_user_got_request, find_all_friends, accept_decline_friend_request, check_if_user_has_username, change_empty_username_to_a_link
from common import delete_keyboard

from states import FriendsStates
from keyboards import add_button_for_friends_requests, create_back_kb


call_back_approve = CallbackData("Approve", "id", "friend")
call_back_decline = CallbackData("Decline", "id", "friend")
call_back_delete = CallbackData("Delete", "id", "friend_to_delete")


# —Å—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫ –≤ –¥—Ä—É–∑—å—è:
# 0 - —Å–æ–∑–¥–∞–Ω–∞
# 1 - –ø—Ä–∏–Ω—è—Ç–∞
# 2 - –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞

async def get_menu_for_command(chat_id: int):
    await botClient.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å", reply_markup=await add_button_for_friends_requests(*await count_friends_requests(chat_id)))


async def count_friends_requests(chat_id: int):
    collection_name = get_database()
    user = await search_user_by_tg_id(chat_id)
    friends_requests_count = collection_name['friends'].count_documents(
        {"to": user['_id'], 'status': 0})
    friends_count = collection_name['friends'].count_documents(
        {"to": user['_id'], 'status': 1})
    friends_count += collection_name['friends'].count_documents(
        {"from": user['_id'], 'status': 1})
    collection_name['friends'].find().close()
    return friends_requests_count, friends_count


async def await_for_a_friend_nickname(callback_query: CallbackQuery):
    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)
    await botClient.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏ –Ω–∏–∫ —Å–≤–æ–µ–≥–æ –¥—Ä—É–≥–∞ –≤ Telegram, –∞ —è –ø—Ä–æ–≤–µ—Ä—é, –∑–Ω–∞–∫–æ–º –ª–∏ —è —Å –Ω–∏–º üôÉ")
    await FriendsStates.AwaitForAFriendNicknameToAdd.set()


async def get_friend_nickname(message: Message, state: FSMContext):
    if message.text == "/stop":
        await state.finish()
        await botClient.send_message(message.chat.id, "–¢—ã –≤—ã—à–µ–ª –∏–∑ —Ä–µ–∂–∏–º–∞ –≤–≤–æ–¥–∞")
        return

    if str(message.text)[0] == '/':
        await botClient.send_message(message.chat.id, "–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ –Ω–∏–∫–Ω–µ–π–º–∞ –¥—Ä—É–≥–∞. –ß—Ç–æ–±—ã –≤—ã–π—Ç–∏ –∏–∑ –Ω–µ–≥–æ, –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É /stop, –∞ –∑–∞—Ç–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑–æ–≤–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É")
        await FriendsStates.AwaitForAFriendNicknameToAdd.set()
        return

    if str(message.text)[0] != '@':
        message.text = "@" + message.text

    if message.text == '@':
        await botClient.send_message(message.chat.id, "–≠—Ç–æ –Ω–∏–∫ –ü–∞–≤–ª–∞ –î—É—Ä–æ–≤–∞? –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å –∏ –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–∏–∫ –µ—â–µ —Ä–∞–∑ üôÉ")
        await FriendsStates.AwaitForAFriendNicknameToAdd.set()
        return


async def send_request_to_a_friend(message: Message):
    friend = await search_user_by_tg_id(message.user_shared.user_id)
# —Ä–∞—Å–ø–∏—Å–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π –≤–µ—Ç–∫–µ –ª–æ–≥–∏–∫–∏
    if (friend is None):
        await botClient.send_message(message.chat.id, "–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–æ –±—É–¥—É —Ä–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ–º—É –¥—Ä—É–≥—É —Å—Å—ã–ª–∫—É –Ω–∞ @RogerMentalBot –∏ –ø–æ–≤—Ç–æ—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏, –∫–æ–≥–¥–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è üôÉ")
        return

    user_request_sent = await check_if_user_sent_request(message.chat.id, friend['_id'])
    if (user_request_sent is None):
        if (user_request_sent['status'] == 0):
            await botClient.send_message(message.chat.id, "–¢—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∑–∞—è–≤–∫—É —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∫–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –ø—Ä–∏–º–µ—Ç –∑–∞—è–≤–∫—É üïñ")
            return
        if (user_request_sent['status'] == 1):
            await botClient.send_message(message.chat.id, "–í—ã —É–∂–µ –¥—Ä—É–∂–∏—Ç–µ üòÑ")
            return

    user_got_request = await check_if_user_got_request(message.chat.id, friend['_id'])
    if (user_got_request is not None):
        if (user_got_request['status'] == 0):
            await botClient.send_message(message.chat.id, "–¢–µ–±–µ —ç—Ç–æ—Ç –¥—Ä—É–≥ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª –∑–∞—è–≤–∫—É. –ü–æ—Å–º–æ—Ç—Ä–∏, –∫—Ç–æ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è: /friends_requests")
            return
        if (user_got_request['status'] == 1):
            await botClient.send_message(message.chat.id, "–í—ã —É–∂–µ –¥—Ä—É–∂–∏—Ç–µ üòÑ")
            return

    await send_friends_request(message.chat.id, friend)
    if not check_if_user_has_username(friend['telegram_username']):
        friend["telegram_username"] = change_empty_username_to_a_link(
            int(friend['telegram_id']), friend['name'])
    await botClient.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤–∏–ª –∑–∞–ø—Ä–æ—Å –¥—Ä—É–∂–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + friend["telegram_username"] + ". –ö–æ–≥–¥–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –ø—Ä–∏–º–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è, —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏")


# –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥—Ä—É–∑–µ–π
async def show_active_friends(callback_query: CallbackQuery):
    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)

    collection_name = get_database()
    user = await search_user_by_tg_id(callback_query.from_user.id)
    friends_list = collection_name['friends'].find(
        {"from": user['_id'], 'status': 1}, {"_id": 0, "to": 1})
    friends_list = [x['to'] for x in friends_list]

    friends_list = list(friends_list)

    friends_list.extend(x['from'] for x in list(collection_name['friends'].find(
        {"to": user['_id'], 'status': 1}, {"_id": 0, "from": 1})))
    if len(friends_list) == 0:
        await botClient.send_message(callback_query.from_user.id, "–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–∑–µ–π. –ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤–æ–≥–æ –¥—Ä—É–≥–∞, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /friends –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ –¥—Ä—É–≥–∞")
        collection_name['friends'].find().close()
        return
    collection_name['friends'].find().close()

    friends_id_list = [await search_user_by_object_id(x) for x in friends_list]
    for x in friends_id_list:
        if not check_if_user_has_username(x['telegram_username']):
            x["telegram_username"] = change_empty_username_to_a_link(
                int(x['telegram_id']), x['name'])

    usernames = ['üò∏' + ' ' + x['telegram_username'] for x in friends_id_list]
    mes = '–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π, –∫–æ—Ç–æ—Ä—ã–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏:\n\n'
    string = '\n'.join(usernames)
    mes += string

    await botClient.send_message(callback_query.from_user.id, mes, parse_mode="Markdown", disable_web_page_preview=True, reply_markup=await create_back_kb("friends_menu"))


async def show_info(callback_query: CallbackQuery):
    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)
    mes = """–†–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ä–µ–∂–∏–º–µ ¬´–î—Ä—É–∑—å—è¬ª

–î—Ä—É–∑—å—è ‚Äî —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏. –°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –æ–ø—Ä–µ–¥–µ–ª—è–µ—à—å —Ç–æ–ª—å–∫–æ —Ç—ã.

–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç—ã –æ—Ç–º–µ—á–∞–µ—à—å üî¥ –∏–ª–∏ üü† –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —Ç–≤–æ–∏ –¥—Ä—É–∑—å—è –ø–æ–ª—É—á–∞—é—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —ç—Ç–æ–º ‚Äî  –æ–Ω–∏ —Å–º–æ–≥—É—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è
    """
    await botClient.send_message(callback_query.from_user.id, mes, parse_mode=ParseMode.MARKDOWN)


async def watch_friends_internal_requests(user_id: int, message_id: int, keyboard_delete_need: bool):
    if (keyboard_delete_need):
        await delete_keyboard(user_id, message_id)

    collection_name = get_database()
    user = await search_user_by_tg_id(user_id)

    friends_list = collection_name['friends'].find(
        {"to": user['_id'], 'status': 0}, {"_id": 0, "from": 1})
    friends_list = [x['from'] for x in friends_list]
    friends_list = list(friends_list)

    if (len(friends_list) == 0):
        await botClient.send_message(user_id, "–£ —Ç–µ–±—è –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–æ–∫ –≤ –¥—Ä—É–∑—å—è")
        collection_name['friends'].find().close()
        return

    for x in friends_list:
        friend_request_kb = InlineKeyboardMarkup()
        friends_obj = collection_name['users'].find_one(
            {"_id": x}, {"_id": 0, "name": 1, "telegram_username": 1, "telegram_id": 1})
        friend_telegram_id = friends_obj["telegram_id"]
        friend_request_kb_approve = InlineKeyboardButton(
            '‚úÖ', callback_data=call_back_approve.new(id='friend_approve', friend=friend_telegram_id))
        friend_request_kb_decline = InlineKeyboardButton(
            '‚ùå', callback_data=call_back_decline.new(id='friend_decline', friend=friend_telegram_id))
        friend_request_kb.add(friend_request_kb_approve,
                              friend_request_kb_decline)

        if not check_if_user_has_username(friends_obj['telegram_username']):
            friends_obj["telegram_username"] = change_empty_username_to_a_link(
                int(friends_obj['telegram_id']), friends_obj['name'])

        await botClient.send_message(user_id, f"–ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {friends_obj['telegram_username']}", reply_markup=friend_request_kb)

    collection_name['friends'].find().close()
    collection_name['user'].find().close()
    return


async def friends_internal_request(callback_query: CallbackQuery, friend: str, approve: bool):
    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)
    friend_obj = await accept_decline_friend_request(callback_query.from_user.id, friend, approve)
    if not check_if_user_has_username(friend_obj['telegram_username']):
        friend_obj["telegram_username"] = change_empty_username_to_a_link(
            int(friend_obj['telegram_id']), friend_obj['name'])
    if approve:
        await botClient.send_message(callback_query.from_user.id, f"–¢–µ–ø–µ—Ä—å —Ç—ã –¥—Ä—É–∂–∏—à—å —Å {friend_obj['telegram_username']} üî•. –ö–æ–≥–¥–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –æ—Ç–º–µ—Ç–∏—Ç üî¥ –∏–ª–∏ üü† –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —è —Å–∫–∞–∂—É —Ç–µ–±–µ –æ–± —ç—Ç–æ–º")
        friend_obj = await search_user_by_tg_id(int(friend))
        user_obj = await search_user_by_tg_id(callback_query.from_user.id)
        if not check_if_user_has_username(user_obj['telegram_username']):
            user_obj["telegram_username"] = change_empty_username_to_a_link(
                int(user_obj['telegram_id']), user_obj['name'])
        await botClient.send_message(friend_obj["telegram_id"], f"–¢–µ–ø–µ—Ä—å —Ç—ã –¥—Ä—É–∂–∏—à—å —Å {user_obj['telegram_username']}. –ö–æ–≥–¥–∞ —Ç–≤–æ–π –¥—Ä—É–≥ –æ—Ç–º–µ—Ç–∏—Ç üî¥ –∏–ª–∏ üü† –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, —è —Å–∫–∞–∂—É —Ç–µ–±–µ –æ–± —ç—Ç–æ–º")
        return
    await botClient.send_message(callback_query.from_user.id, f"–¢—ã –æ—Ç–∫–ª–æ–Ω–∏–ª –∑–∞—è–≤–∫—É –≤ –¥—Ä—É–∑—å—è –æ—Ç {friend_obj['telegram_username']} üôå")
    return


async def send_a_friend_message_about_bad_mood(id_user: int, color: str):
    mood_dict = {'green': "üü¢", 'yellow': "üü°", 'orange': "üü†", 'red': "üî¥"}
    user = await search_user_by_tg_id(id_user)
    friends = await find_all_friends(user, id_user)
    if not friends:
        return
    for friend_user_id in friends:
        friend = await search_user_by_object_id(friend_user_id)
        if not check_if_user_has_username(user['telegram_username']):
            user["telegram_username"] = change_empty_username_to_a_link(
                int(user['telegram_id']), user['name'])
        await botClient.send_message(friend["telegram_id"], f"–¢–≤–æ–π –¥—Ä—É–≥ {user['telegram_username']} –æ—Ç–º–µ—Ç–∏–ª, —á—Ç–æ —Å–µ–≥–æ–¥–Ω—è —É –Ω–µ–≥–æ {mood_dict[color]} –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. –¢—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ–º—É –Ω–∞–ø—Ä—è–º—É—é", parse_mode="Markdown", disable_web_page_preview=True)
    return


async def delete_friends(callback_query: CallbackQuery):
    await delete_keyboard(callback_query.from_user.id, callback_query.message.message_id)
    friends_list = await find_all_friends(await search_user_by_tg_id(callback_query.from_user.id), callback_query.from_user.id)
    await delete_friends_message(callback_query.from_user.id, friends_list, 0, 0)


# –¢—É—Ç –ø–∏–∑–¥–µ—Ü –ø–æ–ª–Ω—ã–π, –¥–≤–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —á—Ç–æ –≤–æ–æ–±—â–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ñ—É–Ω–∫—Ü–∏–∏
# –í –∫–æ–Ω—Ü–µ –∑–∞–±—ã–ª send_mesasge –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?? –ù–µ—Ç –∑–∞–ø–∏—Å–∏ –≤ –ë–î –æ —É–¥–∞–ª–µ–Ω–∏–∏??
async def delete_friends_message(id_user: int, friends_list: list, index_to_show: int, id_message: int):
    if (len(friends_list) == 0):
        await botClient.send_message(id_user, "–£ —Ç–µ–±—è –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å –¥—Ä—É–∑–µ–π ü•≤", reply_markup=await create_back_kb("friends_menu"))
        return
    friends_delete_message_kb = InlineKeyboardMarkup(one_time_keyboard=True)
    mes = "üòª –¢–≤–æ–π –¥—Ä—É–≥: /n/n"
    friend = await search_user_by_object_id(friends_list[index_to_show])
    if (check_if_user_has_username(friend['telegram_username'])) == True:
        mes += friend['telegram_username']
    else:
        change_empty_username_to_a_link(friend['telegram_id'], friend['name'])
    friends_button_delete = InlineKeyboardButton('üòø –£–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞', callback_data=call_back_decline.new
                                                 (id='friend_delete', friend_to_delete=friend['_id']))


# –µ–±–∞–Ω—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é –≤–µ–∑–¥–µ
